package de.zifle.meintestprojekt.api;

import de.zifle.meintestprojekt.model.Board;
import de.zifle.meintestprojekt.model.CreateBoard;
import de.zifle.meintestprojekt.model.CreateBoardNote;
import de.zifle.meintestprojekt.model.CreatedResponse;
import de.zifle.meintestprojekt.model.InternalErrorMessage;
import de.zifle.meintestprojekt.model.LoginData;
import de.zifle.meintestprojekt.model.UpdateBoardNote;
import de.zifle.meintestprojekt.model.User;
import de.zifle.meintestprojekt.model.UserCredentials;

import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.MediaType;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.ApiResponse;
import io.swagger.jaxrs.PATCH;

/**
 * YARB API
 *
 * <p>No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 */
@Path("/")
@Api(value = "/", description = "")
public interface DefaultApi  {

    /**
     * createBoard
     *
     * Create new board
     *
     */
    @POST
    @Path("/boards")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "createBoard", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = CreatedResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized") })
    public CreatedResponse createBoard(CreateBoard createBoard);

    /**
     * createNote
     *
     * Create a new note
     *
     */
    @POST
    @Path("/notes")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "createNote", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = CreatedResponse.class),
        @ApiResponse(code = 404, message = "BoardColumn Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public CreatedResponse createNote(CreateBoardNote createBoardNote);

    /**
     * createUser
     *
     * Create new user
     *
     */
    @POST
    @Path("/users")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "createUser", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 409, message = "Conflict: username already existing"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public void createUser(UserCredentials userCredentials);

    /**
     * deleteNote
     *
     * Delete a note
     *
     */
    @DELETE
    @Path("/notes/{noteId}")
    @Produces({ "application/json" })
    @ApiOperation(value = "deleteNote", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public void deleteNote(@PathParam("noteId") Integer noteId);

    /**
     * deleteVote
     *
     * Delete one vote for the note
     *
     */
    @DELETE
    @Path("/notes/{noteId}/vote")
    @ApiOperation(value = "deleteVote", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 409, message = "Conflict: Note has no votes to delete") })
    public void deleteVote(@PathParam("noteId") Integer noteId);

    /**
     * getBoard
     *
     * get board by Id
     *
     */
    @GET
    @Path("/boards/{boardId}")
    @Produces({ "application/json" })
    @ApiOperation(value = "getBoard", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Board.class),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public Board getBoard(@PathParam("boardId") Integer boardId);

    /**
     * getBoardsByOwner
     *
     * Get boards by owner
     *
     */
    @GET
    @Path("/boards")
    @Produces({ "application/json" })
    @ApiOperation(value = "getBoardsByOwner", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Board.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public List<Board> getBoardsByOwner(@QueryParam("userId") Integer userId);

    /**
     * getUser
     *
     * Get user
     *
     */
    @GET
    @Path("/users/{userId}")
    @Produces({ "application/json" })
    @ApiOperation(value = "getUser", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public User getUser(@PathParam("userId") Integer userId);

    /**
     * login
     *
     * Create token by user credentials and get userId
     *
     */
    @POST
    @Path("/auth/login")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "login", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LoginData.class),
        @ApiResponse(code = 400, message = "Bad Request: Invalid input"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public LoginData login(UserCredentials userCredentials);

    /**
     * postVote
     *
     * Add one vote for the note
     *
     */
    @POST
    @Path("/notes/{noteId}/vote")
    @ApiOperation(value = "postVote", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found") })
    public void postVote(@PathParam("noteId") Integer noteId);

    /**
     * refreshToken
     *
     * Refresh a token and get userId
     *
     */
    @GET
    @Path("/auth/token")
    @Produces({ "application/json" })
    @ApiOperation(value = "refreshToken", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = LoginData.class),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public LoginData refreshToken();

    /**
     * updateNote
     *
     * Update a note
     *
     */
    @PATCH
    @Path("/notes/{noteId}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    @ApiOperation(value = "updateNote", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error", response = InternalErrorMessage.class) })
    public void updateNote(@PathParam("noteId") Integer noteId, UpdateBoardNote updateBoardNote);
}

